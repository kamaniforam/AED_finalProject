/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package uiComponents.BloodRequestManagement;

import Business.Bloodbank.resources.BloodRequest;
import business.Bloodbank.directories.HospitalDirectory;
import business.Bloodbank.resources.BBHospital;
import business.Bloodbank.resources.BloodGroupDetails;
import business.Bloodbank.resources.Hospital;
import business.Bloodbank.resources.Person;
import business.Bloodbank.resources.Role;
import java.util.ArrayList;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class BloodRequestAdminPanel extends javax.swing.JPanel {

    /**
     * Creates new form BloodRequestAdminPanel
     */
    private Person person;
    private static final long serialVersionUID = -4032875739690837338L;

    public static ArrayList<BloodRequest> bloodRequests = new ArrayList<BloodRequest>();
    private ArrayList<Object[]> hospitalResultSet;

    public BloodRequestAdminPanel() {
        initComponents();
        populateRequestTable();
    }

    /**
     * public BloodRequestAdminPanel() { initComponents();
     * populateRequestTable(); }
     *
     * /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        LblBloodRequestAcknowledgement = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        table_1 = new javax.swing.JTable();
        btnAvailable = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        btnUnavailable = new javax.swing.JButton();

        setBackground(javax.swing.UIManager.getDefaults().getColor("Button.default.focusedBackground"));

        jPanel1.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.default.hoverBorderColor"));

        LblBloodRequestAcknowledgement.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.default.hoverBorderColor"));
        LblBloodRequestAcknowledgement.setFont(new java.awt.Font("Georgia", 1, 15)); // NOI18N
        LblBloodRequestAcknowledgement.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LblBloodRequestAcknowledgement.setText("Blood Request Acknowledgement");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(LblBloodRequestAcknowledgement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(LblBloodRequestAcknowledgement, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
        );

        table_1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Bank Name", "Blood Group", "Available Units", "City", "Zipcode"
            }
        ));
        jScrollPane3.setViewportView(table_1);

        btnAvailable.setBackground(javax.swing.UIManager.getDefaults().getColor("Component.accentColor"));
        btnAvailable.setForeground(new java.awt.Color(255, 255, 255));
        btnAvailable.setText("Available");
        btnAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAvailableActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Posted By", "Posted On", "Email", "City", "Zipcode", "Blood Group", "Requested Units"
            }
        ));
        jScrollPane2.setViewportView(table);

        btnUnavailable.setText("Unavilable");
        btnUnavailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnavailableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1135, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(161, 161, 161)
                                .addComponent(btnAvailable)
                                .addGap(26, 26, 26)
                                .addComponent(btnUnavailable))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1025, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 236, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAvailable)
                    .addComponent(btnUnavailable))
                .addGap(23, 23, 23))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAvailableActionPerformed
        // TODO add your handling code here:

        Object[] hospital = hospitalResultSet.get(table_1.getSelectedRow());
        BloodRequest bldReq = bloodRequests.get(0);

        String hospName = (String) hospital[0];

        for (BBHospital hosp : HospitalDirectory.getHospitals()) {

            if (hosp.getHospitalDetails().getHospitalName().equals(hospName)) {

                for (BloodGroupDetails details : hosp.getAllBloodGroups()) {

                    if (details.getBloodGroup().equals((String) hospital[1])) {

                        Integer reqUnits = Integer.parseInt(bldReq.getRequestedUnits());
                        Integer avaUnits = Integer.parseInt((String) hospital[2]);

                        Integer finalUnits = avaUnits - reqUnits;

                        details.setAvailableUnits(finalUnits);
                        bloodRequests.remove(0);
                    }
                }
            }
        }

        removeAllRows(table);
        removeAllRows(table_1);

        populateRequestTable();
        populateHospitalTable();

    }//GEN-LAST:event_btnAvailableActionPerformed

    private void btnUnavailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnavailableActionPerformed
        // TODO add your handling code here:
        bloodRequests.remove(0);
				
				removeAllRows(table);
				removeAllRows(table_1);
				
				populateRequestTable();
				populateHospitalTable();
			
    }//GEN-LAST:event_btnUnavailableActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LblBloodRequestAcknowledgement;
    private javax.swing.JButton btnAvailable;
    private javax.swing.JButton btnUnavailable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable table;
    private javax.swing.JTable table_1;
    // End of variables declaration//GEN-END:variables

    private void removeAllRows(JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int rowCount = model.getRowCount();
        // Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
    }

    private void populateRequestTable() {
        DefaultTableModel model = (DefaultTableModel) table.getModel();

        for (BloodRequest request : bloodRequests) {

            if (person.getRole().equals(Role.SYSTEM_ADMIN)) {

                Object[] obj = new Object[7];

                obj[0] = request.getPostedBy();
                obj[1] = request.getPostedOn();
                obj[2] = request.getEmail();
                obj[3] = request.getCity();
                obj[4] = request.getZipcode();
                obj[5] = request.getBloodGroup();
                obj[6] = request.getRequestedUnits();

                model.addRow(obj);
            } else {

                String adminCity = person.getCommunity().getCity();
                String adminZipcode = Integer.toString(person.getCommunity().getZipcode());

                if (adminCity.equals(request.getCity())
                        && adminZipcode.equals(request.getZipcode())) {

                    Object[] obj = new Object[7];

                    obj[0] = request.getPostedBy();
                    obj[1] = request.getPostedOn();
                    obj[2] = request.getEmail();
                    obj[3] = request.getCity();
                    obj[4] = request.getZipcode();
                    obj[5] = request.getBloodGroup();
                    obj[6] = request.getRequestedUnits();

                    model.addRow(obj);
                }
            }
        }
    }

    private void populateHospitalTable() {

        DefaultTableModel model = (DefaultTableModel) table_1.getModel();
        hospitalResultSet = new ArrayList<Object[]>();

        for (BBHospital hospital : HospitalDirectory.getHospitals()) {

            for (BloodGroupDetails details : hospital.getAllBloodGroups()) {

                if (person.getRole().equals(Role.SYSTEM_ADMIN)) {

                    Object[] obj = new Object[5];

                    obj[0] = hospital.getHospitalDetails().getHospitalName();
                    obj[1] = details.getBloodGroup();
                    obj[2] = details.getAvailableUnits();
                    obj[3] = hospital.getCommunity().getCity();
                    obj[4] = hospital.getCommunity().getZipcode();

                    model.addRow(obj);
                    hospitalResultSet.add(obj);
                } else {

                    String adminCity = person.getCommunity().getCity();
                    Integer adminZipcode = person.getCommunity().getZipcode();

                    if (adminCity.equals(hospital.getCommunity().getCity())
                            && adminZipcode.equals(hospital.getCommunity().getZipcode())) {

                        Object[] obj = new Object[5];

                        obj[0] = hospital.getHospitalDetails().getHospitalName();
                        obj[1] = details.getBloodGroup();
                        obj[2] = details.getAvailableUnits();
                        obj[3] = hospital.getCommunity().getCity();
                        obj[4] = hospital.getCommunity().getZipcode();

                        model.addRow(obj);
                        hospitalResultSet.add(obj);
                    }
                }
            }
        }
    }
}
